digraph "testing::TestSuite"
{
 // INTERACTIVE_SVG=YES
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{testing::TestSuite\n|- set_up_tc_\l- tear_down_tc_\l- should_run_\l- start_timestamp_\l- elapsed_time_\l|+ TestSuite()\l+ ~TestSuite()\l+ name()\l+ type_param()\l+ should_run()\l+ successful_test_count()\l+ skipped_test_count()\l+ failed_test_count()\l+ reportable_disabled\l_test_count()\l+ disabled_test_count()\land 9 more...\l- test_info_list()\l- test_info_list()\l- GetMutableTestInfo()\l- set_should_run()\l- AddTestInfo()\l- ClearResult()\l- Run()\l- Skip()\l- RunSetUpTestSuite()\l- RunTearDownTestSuite()\l- ShuffleTests()\l- UnshuffleTests()\l- GTEST_DISALLOW_COPY\l_AND_ASSIGN_()\l- ClearTestSuiteResult()\l- TestPassed()\l- TestSkipped()\l- TestFailed()\l- TestReportableDisabled()\l- TestDisabled()\l- TestReportable()\l- ShouldRunTest()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip=" "];
  Node2 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -ad_hoc_test_result_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node2 [label="{testing::TestResult\n|- death_test_count_\l- start_timestamp_\l- elapsed_time_\l|+ TestResult()\l+ ~TestResult()\l+ total_part_count()\l+ test_property_count()\l+ Passed()\l+ Skipped()\l+ Failed()\l+ HasFatalFailure()\l+ HasNonfatalFailure()\l+ elapsed_time()\l+ start_timestamp()\l+ GetTestPartResult()\l+ GetTestProperty()\l- test_part_results()\l- test_properties()\l- set_start_timestamp()\l- set_elapsed_time()\l- RecordProperty()\l- AddTestPartResult()\l- death_test_count()\l- increment_death_test\l_count()\l- ClearTestPartResults()\l- Clear()\l- GTEST_DISALLOW_COPY\l_AND_ASSIGN_()\l- ValidateTestProperty()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d69/classtesting_1_1_test_result.html",tooltip=" "];
  Node3 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -test_properites_mutex_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{testing::internal::\lMutex\n||+ Mutex()\l+ Lock()\l+ Unlock()\l+ AssertHeld()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/d77/classtesting_1_1internal_1_1_mutex.html",tooltip=" "];
  Node4 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -test_properties_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node4 [label="{std::vector\< testing\l::TestProperty \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node5 -> Node4 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{testing::TestProperty\n||+ TestProperty()\l+ key()\l+ value()\l+ SetValue()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d0/d27/classtesting_1_1_test_property.html",tooltip=" "];
  Node6 -> Node5 [color="grey25",fontsize="10",style="solid",label=" -key_\n-value_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{std::string\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip="STL class."];
  Node7 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{std::basic_string\<\l char \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip="STL class."];
  Node8 -> Node4 [dir="back",color="orange",fontsize="10",style="solid",label=" \< testing::TestProperty \>" ,fontname="Helvetica"];
  Node8 [label="{std::vector\< T \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip="STL class."];
  Node9 -> Node8 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node9 [label="{T\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node10 -> Node2 [color="grey25",fontsize="10",style="solid",label=" -test_part_results_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node10 [label="{std::vector\< TestPartResult \>\n|+ elements\l|}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node8 -> Node10 [dir="back",color="orange",fontsize="10",style="solid",label=" \< TestPartResult \>" ,fontname="Helvetica"];
  Node11 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -test_info_list_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{std::vector\< testing\l::TestInfo * \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node12 -> Node11 [color="grey25",fontsize="10",style="solid",label=" +elements" ,arrowhead="odiamond",fontname="Helvetica"];
  Node12 [label="{testing::TestInfo\n|- fixture_class_id_\l- should_run_\l- is_disabled_\l- matches_filter_\l- is_in_another_shard_\l|+ ~TestInfo()\l+ test_suite_name()\l+ test_case_name()\l+ name()\l+ type_param()\l+ value_param()\l+ file()\l+ line()\l+ is_in_another_shard()\l+ should_run()\l+ is_reportable()\l+ result()\l- TestInfo()\l- increment_death_test\l_count()\l- Run()\l- Skip()\l- GTEST_DISALLOW_COPY\l_AND_ASSIGN_()\l- ClearTestResult()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d1/d79/classtesting_1_1_test_info.html",tooltip=" "];
  Node2 -> Node12 [color="grey25",fontsize="10",style="solid",label=" -result_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node13 -> Node12 [color="grey25",fontsize="10",style="solid",label=" -value_param_\n-type_param_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node13 [label="{std::unique_ptr\< const\l ::std::string \>\n||+ operator-\>()\l}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node6 -> Node13 [color="grey25",fontsize="10",style="solid",label=" +ptr" ,arrowhead="odiamond",fontname="Helvetica"];
  Node14 -> Node13 [dir="back",color="orange",fontsize="10",style="solid",label=" \< const ::std::string \>" ,fontname="Helvetica"];
  Node14 [label="{std::unique_ptr\< T \>\n||+ operator-\>()\l}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip="STL class."];
  Node9 -> Node14 [color="grey25",fontsize="10",style="solid",label=" +ptr" ,arrowhead="odiamond",fontname="Helvetica"];
  Node15 -> Node12 [color="grey25",fontsize="10",style="solid",label=" -factory_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node15 [label="{testing::internal::\lTestFactoryBase\n||+ ~TestFactoryBase()\l+ CreateTest()\l# TestFactoryBase()\l- GTEST_DISALLOW_COPY\l_AND_ASSIGN_()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/d8b/classtesting_1_1internal_1_1_test_factory_base.html",tooltip=" "];
  Node16 -> Node12 [color="grey25",fontsize="10",style="solid",label=" -location_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node16 [label="{testing::internal::\lCodeLocation\n|+ line\l|+ CodeLocation()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d7/d69/structtesting_1_1internal_1_1_code_location.html",tooltip=" "];
  Node6 -> Node16 [color="grey25",fontsize="10",style="solid",label=" +file" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 -> Node12 [color="grey25",fontsize="10",style="solid",label=" -name_\n-test_suite_name_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 -> Node11 [dir="back",color="orange",fontsize="10",style="solid",label=" \< testing::TestInfo * \>" ,fontname="Helvetica"];
  Node13 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -type_param_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -name_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node17 -> Node1 [color="grey25",fontsize="10",style="solid",label=" -test_indices_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node17 [label="{std::vector\< int \>\n|+ elements\l|}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip=" "];
  Node8 -> Node17 [dir="back",color="orange",fontsize="10",style="solid",label=" \< int \>" ,fontname="Helvetica"];
}
